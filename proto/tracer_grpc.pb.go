// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: tracer.proto

package distributed_tracer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CollectorService_CollectSpan_FullMethodName        = "/tracer.CollectorService/CollectSpan"
	CollectorService_GetTrace_FullMethodName           = "/tracer.CollectorService/GetTrace"
	CollectorService_ListTraces_FullMethodName         = "/tracer.CollectorService/ListTraces"
	CollectorService_GetCollectorStatus_FullMethodName = "/tracer.CollectorService/GetCollectorStatus"
	CollectorService_ReplicateSpans_FullMethodName     = "/tracer.CollectorService/ReplicateSpans"
	CollectorService_SyncClock_FullMethodName          = "/tracer.CollectorService/SyncClock"
)

// CollectorServiceClient is the client API for CollectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Collector service definition
type CollectorServiceClient interface {
	// Collect a single span
	CollectSpan(ctx context.Context, in *CollectSpanRequest, opts ...grpc.CallOption) (*CollectSpanResponse, error)
	// Get a complete trace by ID
	GetTrace(ctx context.Context, in *GetTraceRequest, opts ...grpc.CallOption) (*GetTraceResponse, error)
	// List traces with filtering
	ListTraces(ctx context.Context, in *ListTracesRequest, opts ...grpc.CallOption) (*ListTracesResponse, error)
	// Get collector health status
	GetCollectorStatus(ctx context.Context, in *GetCollectorStatusRequest, opts ...grpc.CallOption) (*GetCollectorStatusResponse, error)
	// Replicate spans between collectors
	ReplicateSpans(ctx context.Context, in *ReplicateSpansRequest, opts ...grpc.CallOption) (*ReplicateSpansResponse, error)
	// Synchronize clocks
	SyncClock(ctx context.Context, in *SyncClockRequest, opts ...grpc.CallOption) (*SyncClockResponse, error)
}

type collectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectorServiceClient(cc grpc.ClientConnInterface) CollectorServiceClient {
	return &collectorServiceClient{cc}
}

func (c *collectorServiceClient) CollectSpan(ctx context.Context, in *CollectSpanRequest, opts ...grpc.CallOption) (*CollectSpanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectSpanResponse)
	err := c.cc.Invoke(ctx, CollectorService_CollectSpan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) GetTrace(ctx context.Context, in *GetTraceRequest, opts ...grpc.CallOption) (*GetTraceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTraceResponse)
	err := c.cc.Invoke(ctx, CollectorService_GetTrace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) ListTraces(ctx context.Context, in *ListTracesRequest, opts ...grpc.CallOption) (*ListTracesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTracesResponse)
	err := c.cc.Invoke(ctx, CollectorService_ListTraces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) GetCollectorStatus(ctx context.Context, in *GetCollectorStatusRequest, opts ...grpc.CallOption) (*GetCollectorStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCollectorStatusResponse)
	err := c.cc.Invoke(ctx, CollectorService_GetCollectorStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) ReplicateSpans(ctx context.Context, in *ReplicateSpansRequest, opts ...grpc.CallOption) (*ReplicateSpansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplicateSpansResponse)
	err := c.cc.Invoke(ctx, CollectorService_ReplicateSpans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) SyncClock(ctx context.Context, in *SyncClockRequest, opts ...grpc.CallOption) (*SyncClockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncClockResponse)
	err := c.cc.Invoke(ctx, CollectorService_SyncClock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectorServiceServer is the server API for CollectorService service.
// All implementations must embed UnimplementedCollectorServiceServer
// for forward compatibility.
//
// Collector service definition
type CollectorServiceServer interface {
	// Collect a single span
	CollectSpan(context.Context, *CollectSpanRequest) (*CollectSpanResponse, error)
	// Get a complete trace by ID
	GetTrace(context.Context, *GetTraceRequest) (*GetTraceResponse, error)
	// List traces with filtering
	ListTraces(context.Context, *ListTracesRequest) (*ListTracesResponse, error)
	// Get collector health status
	GetCollectorStatus(context.Context, *GetCollectorStatusRequest) (*GetCollectorStatusResponse, error)
	// Replicate spans between collectors
	ReplicateSpans(context.Context, *ReplicateSpansRequest) (*ReplicateSpansResponse, error)
	// Synchronize clocks
	SyncClock(context.Context, *SyncClockRequest) (*SyncClockResponse, error)
	mustEmbedUnimplementedCollectorServiceServer()
}

// UnimplementedCollectorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCollectorServiceServer struct{}

func (UnimplementedCollectorServiceServer) CollectSpan(context.Context, *CollectSpanRequest) (*CollectSpanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectSpan not implemented")
}
func (UnimplementedCollectorServiceServer) GetTrace(context.Context, *GetTraceRequest) (*GetTraceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrace not implemented")
}
func (UnimplementedCollectorServiceServer) ListTraces(context.Context, *ListTracesRequest) (*ListTracesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTraces not implemented")
}
func (UnimplementedCollectorServiceServer) GetCollectorStatus(context.Context, *GetCollectorStatusRequest) (*GetCollectorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectorStatus not implemented")
}
func (UnimplementedCollectorServiceServer) ReplicateSpans(context.Context, *ReplicateSpansRequest) (*ReplicateSpansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicateSpans not implemented")
}
func (UnimplementedCollectorServiceServer) SyncClock(context.Context, *SyncClockRequest) (*SyncClockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncClock not implemented")
}
func (UnimplementedCollectorServiceServer) mustEmbedUnimplementedCollectorServiceServer() {}
func (UnimplementedCollectorServiceServer) testEmbeddedByValue()                          {}

// UnsafeCollectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectorServiceServer will
// result in compilation errors.
type UnsafeCollectorServiceServer interface {
	mustEmbedUnimplementedCollectorServiceServer()
}

func RegisterCollectorServiceServer(s grpc.ServiceRegistrar, srv CollectorServiceServer) {
	// If the following call pancis, it indicates UnimplementedCollectorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CollectorService_ServiceDesc, srv)
}

func _CollectorService_CollectSpan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectSpanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).CollectSpan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectorService_CollectSpan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).CollectSpan(ctx, req.(*CollectSpanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_GetTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).GetTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectorService_GetTrace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).GetTrace(ctx, req.(*GetTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_ListTraces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTracesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).ListTraces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectorService_ListTraces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).ListTraces(ctx, req.(*ListTracesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_GetCollectorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).GetCollectorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectorService_GetCollectorStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).GetCollectorStatus(ctx, req.(*GetCollectorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_ReplicateSpans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicateSpansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).ReplicateSpans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectorService_ReplicateSpans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).ReplicateSpans(ctx, req.(*ReplicateSpansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_SyncClock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncClockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).SyncClock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectorService_SyncClock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).SyncClock(ctx, req.(*SyncClockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectorService_ServiceDesc is the grpc.ServiceDesc for CollectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracer.CollectorService",
	HandlerType: (*CollectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectSpan",
			Handler:    _CollectorService_CollectSpan_Handler,
		},
		{
			MethodName: "GetTrace",
			Handler:    _CollectorService_GetTrace_Handler,
		},
		{
			MethodName: "ListTraces",
			Handler:    _CollectorService_ListTraces_Handler,
		},
		{
			MethodName: "GetCollectorStatus",
			Handler:    _CollectorService_GetCollectorStatus_Handler,
		},
		{
			MethodName: "ReplicateSpans",
			Handler:    _CollectorService_ReplicateSpans_Handler,
		},
		{
			MethodName: "SyncClock",
			Handler:    _CollectorService_SyncClock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tracer.proto",
}

const (
	ServiceA_SayHello_FullMethodName = "/tracer.ServiceA/SayHello"
)

// ServiceAClient is the client API for ServiceA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service A - API Gateway
type ServiceAClient interface {
	// Handles a hello request
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type serviceAClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceAClient(cc grpc.ClientConnInterface) ServiceAClient {
	return &serviceAClient{cc}
}

func (c *serviceAClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, ServiceA_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceAServer is the server API for ServiceA service.
// All implementations must embed UnimplementedServiceAServer
// for forward compatibility.
//
// Service A - API Gateway
type ServiceAServer interface {
	// Handles a hello request
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	mustEmbedUnimplementedServiceAServer()
}

// UnimplementedServiceAServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceAServer struct{}

func (UnimplementedServiceAServer) SayHello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedServiceAServer) mustEmbedUnimplementedServiceAServer() {}
func (UnimplementedServiceAServer) testEmbeddedByValue()                  {}

// UnsafeServiceAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceAServer will
// result in compilation errors.
type UnsafeServiceAServer interface {
	mustEmbedUnimplementedServiceAServer()
}

func RegisterServiceAServer(s grpc.ServiceRegistrar, srv ServiceAServer) {
	// If the following call pancis, it indicates UnimplementedServiceAServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceA_ServiceDesc, srv)
}

func _ServiceA_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceA_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceA_ServiceDesc is the grpc.ServiceDesc for ServiceA service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceA_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracer.ServiceA",
	HandlerType: (*ServiceAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _ServiceA_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tracer.proto",
}

const (
	ServiceB_Search_FullMethodName       = "/tracer.ServiceB/Search"
	ServiceB_Process_FullMethodName      = "/tracer.ServiceB/Process"
	ServiceB_ForwardHello_FullMethodName = "/tracer.ServiceB/ForwardHello"
)

// ServiceBClient is the client API for ServiceB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service B - Business Logic
type ServiceBClient interface {
	// Handles search operations
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// Handles data processing
	Process(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error)
	// Forwards hello requests to Service C
	ForwardHello(ctx context.Context, in *ForwardHelloRequest, opts ...grpc.CallOption) (*ForwardHelloResponse, error)
}

type serviceBClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceBClient(cc grpc.ClientConnInterface) ServiceBClient {
	return &serviceBClient{cc}
}

func (c *serviceBClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, ServiceB_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceBClient) Process(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessResponse)
	err := c.cc.Invoke(ctx, ServiceB_Process_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceBClient) ForwardHello(ctx context.Context, in *ForwardHelloRequest, opts ...grpc.CallOption) (*ForwardHelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForwardHelloResponse)
	err := c.cc.Invoke(ctx, ServiceB_ForwardHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceBServer is the server API for ServiceB service.
// All implementations must embed UnimplementedServiceBServer
// for forward compatibility.
//
// Service B - Business Logic
type ServiceBServer interface {
	// Handles search operations
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// Handles data processing
	Process(context.Context, *ProcessRequest) (*ProcessResponse, error)
	// Forwards hello requests to Service C
	ForwardHello(context.Context, *ForwardHelloRequest) (*ForwardHelloResponse, error)
	mustEmbedUnimplementedServiceBServer()
}

// UnimplementedServiceBServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceBServer struct{}

func (UnimplementedServiceBServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedServiceBServer) Process(context.Context, *ProcessRequest) (*ProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedServiceBServer) ForwardHello(context.Context, *ForwardHelloRequest) (*ForwardHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardHello not implemented")
}
func (UnimplementedServiceBServer) mustEmbedUnimplementedServiceBServer() {}
func (UnimplementedServiceBServer) testEmbeddedByValue()                  {}

// UnsafeServiceBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceBServer will
// result in compilation errors.
type UnsafeServiceBServer interface {
	mustEmbedUnimplementedServiceBServer()
}

func RegisterServiceBServer(s grpc.ServiceRegistrar, srv ServiceBServer) {
	// If the following call pancis, it indicates UnimplementedServiceBServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceB_ServiceDesc, srv)
}

func _ServiceB_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceBServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceB_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceBServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceB_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceBServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceB_Process_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceBServer).Process(ctx, req.(*ProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceB_ForwardHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceBServer).ForwardHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceB_ForwardHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceBServer).ForwardHello(ctx, req.(*ForwardHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceB_ServiceDesc is the grpc.ServiceDesc for ServiceB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracer.ServiceB",
	HandlerType: (*ServiceBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _ServiceB_Search_Handler,
		},
		{
			MethodName: "Process",
			Handler:    _ServiceB_Process_Handler,
		},
		{
			MethodName: "ForwardHello",
			Handler:    _ServiceB_ForwardHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tracer.proto",
}

const (
	ServiceC_QueryDatabase_FullMethodName = "/tracer.ServiceC/QueryDatabase"
	ServiceC_StoreData_FullMethodName     = "/tracer.ServiceC/StoreData"
	ServiceC_Greet_FullMethodName         = "/tracer.ServiceC/Greet"
)

// ServiceCClient is the client API for ServiceC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service C - Data Service
type ServiceCClient interface {
	// Queries the database
	QueryDatabase(ctx context.Context, in *QueryDatabaseRequest, opts ...grpc.CallOption) (*QueryDatabaseResponse, error)
	// Stores data
	StoreData(ctx context.Context, in *StoreDataRequest, opts ...grpc.CallOption) (*StoreDataResponse, error)
	// Greets a user
	Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error)
}

type serviceCClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceCClient(cc grpc.ClientConnInterface) ServiceCClient {
	return &serviceCClient{cc}
}

func (c *serviceCClient) QueryDatabase(ctx context.Context, in *QueryDatabaseRequest, opts ...grpc.CallOption) (*QueryDatabaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDatabaseResponse)
	err := c.cc.Invoke(ctx, ServiceC_QueryDatabase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceCClient) StoreData(ctx context.Context, in *StoreDataRequest, opts ...grpc.CallOption) (*StoreDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreDataResponse)
	err := c.cc.Invoke(ctx, ServiceC_StoreData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceCClient) Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GreetResponse)
	err := c.cc.Invoke(ctx, ServiceC_Greet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceCServer is the server API for ServiceC service.
// All implementations must embed UnimplementedServiceCServer
// for forward compatibility.
//
// Service C - Data Service
type ServiceCServer interface {
	// Queries the database
	QueryDatabase(context.Context, *QueryDatabaseRequest) (*QueryDatabaseResponse, error)
	// Stores data
	StoreData(context.Context, *StoreDataRequest) (*StoreDataResponse, error)
	// Greets a user
	Greet(context.Context, *GreetRequest) (*GreetResponse, error)
	mustEmbedUnimplementedServiceCServer()
}

// UnimplementedServiceCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceCServer struct{}

func (UnimplementedServiceCServer) QueryDatabase(context.Context, *QueryDatabaseRequest) (*QueryDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDatabase not implemented")
}
func (UnimplementedServiceCServer) StoreData(context.Context, *StoreDataRequest) (*StoreDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreData not implemented")
}
func (UnimplementedServiceCServer) Greet(context.Context, *GreetRequest) (*GreetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greet not implemented")
}
func (UnimplementedServiceCServer) mustEmbedUnimplementedServiceCServer() {}
func (UnimplementedServiceCServer) testEmbeddedByValue()                  {}

// UnsafeServiceCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceCServer will
// result in compilation errors.
type UnsafeServiceCServer interface {
	mustEmbedUnimplementedServiceCServer()
}

func RegisterServiceCServer(s grpc.ServiceRegistrar, srv ServiceCServer) {
	// If the following call pancis, it indicates UnimplementedServiceCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceC_ServiceDesc, srv)
}

func _ServiceC_QueryDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCServer).QueryDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceC_QueryDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCServer).QueryDatabase(ctx, req.(*QueryDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceC_StoreData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCServer).StoreData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceC_StoreData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCServer).StoreData(ctx, req.(*StoreDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceC_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceC_Greet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCServer).Greet(ctx, req.(*GreetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceC_ServiceDesc is the grpc.ServiceDesc for ServiceC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracer.ServiceC",
	HandlerType: (*ServiceCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryDatabase",
			Handler:    _ServiceC_QueryDatabase_Handler,
		},
		{
			MethodName: "StoreData",
			Handler:    _ServiceC_StoreData_Handler,
		},
		{
			MethodName: "Greet",
			Handler:    _ServiceC_Greet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tracer.proto",
}
